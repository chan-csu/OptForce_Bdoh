

%Load the model of Synechococcus
model = readCbModel('Synechococcus_elongatus_PCC_7942_iJB785.mat');

model = changeRxnBounds(model,'EX_photon410_e',-216,'l'); 
model = changeRxnBounds(model,'EX_photon430_e',-216,'l');
model = changeRxnBounds(model,'EX_photon450_e',-216,'l');
model = changeRxnBounds(model,'EX_photon470_e',-216,'l');
model = changeRxnBounds(model,'EX_photon490_e',-216,'l');
model = changeRxnBounds(model,'EX_photon510_e',-216,'l');
model = changeRxnBounds(model,'EX_photon530_e',-216,'l');
model = changeRxnBounds(model,'EX_photon550_e',-216,'l');
model = changeRxnBounds(model,'EX_photon570_e',-216,'l');
model = changeRxnBounds(model,'EX_photon590_e',-216,'l');
model = changeRxnBounds(model,'EX_photon610_e',-216,'l');
model = changeRxnBounds(model,'EX_photon630_e',-216,'l');
model = changeRxnBounds(model,'EX_photon650_e',-216,'l');
model = changeRxnBounds(model,'EX_photon670_e',-216,'l');
model = changeRxnBounds(model,'EX_photon690_e',-216,'l'); % mmol/gCDW/h

model = changeRxnBounds(model,'EX_co2_e',-8.9,'l'); % mmol/gCDW/h from SI of https://pubmed.ncbi.nlm.nih.gov/28139686/

%% Add metabolites and reactions
% model = readCbModel('Synechococcus_elongatus_PCC_7942_iJB785.mat');
model_new = model;
model_new = addMetabolite(model, 'pacald_c');
model_new = addMetabolite(model_new, '2-pe_c');

model_new = addReaction(model_new, 'kivD', 'reactionFormula', 'phpyr_c -> pacald_c + co2_c');
model_new = addReaction(model_new, 'adhA', 'reactionFormula', 'pacald_c + nadph_c <=> 2-pe_c + nadp_c');
model_new = addReaction(model_new, 'EX_2-pe', 'reactionFormula', '2-pe_c -> ');

%% Start optForce 

Model=model_new;

%   This can be changed to a conditional form: If solver is not already
%   gurobi, change it to gurobi
changeCobraSolver('gurobi','all');
Wild_Type=optimizeCbModel(Model,'max');
Model_MT=changeObjective(Model,'EX_2-pe'); 
Model_MT=changeRxnBounds(Model_MT,'BIOMASS__1',Wild_Type.f*0.1,'b'); 
Mutant=optimizeCbModel(Model_MT);
exchanges=cellfun(@isempty, strfind(Model.rxns, 'EX_'))==0;
Ex_Rxns=Model.rxns(exchanges);Ex_MT=Mutant.x(exchanges);Ex_WT=Wild_Type.x(exchanges);
Diff_Ind=Ex_MT~=Ex_WT;
Exchange_Comp=table(Ex_Rxns(Diff_Ind),Ex_WT(Diff_Ind),Ex_MT(Diff_Ind),'VariableNames',{'Ex_Rxns','WT','MT'})
clear Ex_MT Ex_WT Diff_Ind

%% Building The Constraints
constrWT = struct('rxnList', {{'BIOMASS__1'}}, 'rxnValues', Wild_Type.f, 'rxnBoundType', 'b');
constrMT = struct('rxnList', {{'BIOMASS__1', 'EX_2-pe'}}, 'rxnValues', [Wild_Type.f*0.1, Mutant.f],'rxnBoundType', 'bb');
[minFluxesW, maxFluxesW, minFluxesM, maxFluxesM, ~, ~] = FVAOptForce(Model,constrWT, constrMT);
FVA_Results=table(Model.rxns,minFluxesW, maxFluxesW, minFluxesM, maxFluxesM);


%% Finding Musts
% runID = 'OptForce_2-pe';
% constrOpt = struct('rxnList', {{'BIOMASS__1','EX_2-pe'}}, 'values', [Wild_Type.f*0.1,Mutant.f]'); 
% [mustLSet, pos_mustL] = findMustL(Model, minFluxesW, maxFluxesW, 'constrOpt', constrOpt, ...
%                                   'runID', runID, 'outputFolder', 'OutputsFindMustL', ...
%                                   'outputFileName', 'MustL' , 'printExcel', 1, 'printText', 1, ...
%                                   'printReport', 1, 'keepInputs', 1, 'verbose', 1);
% [mustUSet, pos_mustU] = findMustU(Model, minFluxesW, maxFluxesW, 'constrOpt', constrOpt, ...
%                                   'runID', runID, 'outputFolder', 'OutputsFindMustU', ...
%                                   'outputFileName', 'MustU' , 'printExcel', 1, 'printText', 1, ...
%                                  'printReport', 1, 'keepInputs', 1, 'verbose', 1);
j=0;k=0
%% Manual Must set creations
for i=1:length(model.rxns)
if minFluxesM(i)>maxFluxesW(i)
j=j+1
mustUSet(j)=Model.rxns(i)
post_mustU(j)=i
elseif minFluxesW(i)>maxFluxesM(i)
k=k+1
mustLSet(k)=Model.rxns(i)
post_mustL(k)=i
end
end
%% Second Order must sets 
%First All possible possible binaries should be generated:
n=0;
j=2;
for i=1:length(Model.rxns)
    j=i+1;
    while j<(length(Model.rxns)+1)
        n=n+1;
        poss_bin(n,1)=Model.rxns(i);
        poss_bin(n,2)=Model.rxns(j);
        poss_bin(n,3)={i};
        poss_bin(n,4)={j};
        j=j+1;
    end
end
j=0;
k=0;
l=0;
for i=1:n
    if maxFluxesW(poss_bin{i,3})+maxFluxesW(poss_bin{i,4})<minFluxesM(poss_bin{i,3})+minFluxesM(poss_bin{i,4})
        j=j+1;
        mustUU{j,1}=poss_bin{i,1};
        pos_mustUU{j,1}=poss_bin{i,3};
        mustUU{j,2}=poss_bin{i,2};
        pos_mustUU{j,2}=poss_bin{i,4};  
    elseif  maxFluxesM(poss_bin{i,3})+maxFluxesW(poss_bin{i,4})<minFluxesW(poss_bin{i,3})+minFluxesW(poss_bin{i,4})  
        k=k+1;
        mustLL{k,1}=poss_bin{i,1};
        pos_mustLL{k,1}=poss_bin{i,3};
        mustLL{k,2}=poss_bin{i,2};
        pos_mustLL{k,2}=poss_bin{i,4};
    elseif  maxFluxesM(poss_bin{i,4})-maxFluxesW(poss_bin{i,3})<minFluxesW(poss_bin{i,4})-minFluxesM(poss_bin{i,3})  
        l=l+1;
        mustUL{l,1}=poss_bin{i,1};
        pos_mustUL{l,1}=poss_bin{i,3};
        mustUL{l,2}=poss_bin{i,2};
        pos_mustUL{l,2}=poss_bin{i,4};
    end
end
                              
% exchangeRxns = Model.rxns(cellfun(@isempty, strfind(Model.rxns, 'EX_')) == 0);
% excludedRxns = unique([mustUSet; mustLSet; exchangeRxns]);
% 
% [mustUU, pos_mustUU, mustUU_linear, pos_mustUU_linear] = ...
%     findMustUU(Model, minFluxesW, maxFluxesW, 'constrOpt', constrOpt, ...
%                'excludedRxns', excludedRxns,'runID', runID, ...
%                'outputFolder', 'OutputsFindMustUU', 'outputFileName', 'MustUU', ...
%                'printExcel', 0, 'printText', 0, 'printReport', 0, 'keepInputs', 1, ...
%                'verbose', 1);
% [mustLL, pos_mustLL, mustLL_linear, pos_mustLL_linear] = ...
%     findMustLL(Model, minFluxesW, maxFluxesW, 'constrOpt', constrOpt, ...
%                'excludedRxns', excludedRxns,'runID', runID, ...
%                'outputFolder', 'OutputsFindMustLL', 'outputFileName', 'MustLL', ...
%                'printExcel', 0, 'printText', 0, 'printReport', 0, 'keepInputs', 1, ...
%                'verbose', 1);
% [mustUL, pos_mustUL, mustUL_linear, pos_mustUL_linear] = ...
%     findMustUL(Model, minFluxesW, maxFluxesW, 'constrOpt', constrOpt, ...
%                'excludedRxns', excludedRxns,'runID', runID, ...
%                'outputFolder', 'OutputsFindMustUL', 'outputFileName', 'MustUL', ...
%                'printExcel', 0, 'printText', 0, 'printReport', 0, 'keepInputs', 1, ...
%                'verbose', 1);
% 
% mustUSet
% mustLSet
% mustUU
% mustUL
% mustLL
% 
% 
% %% OptForce 
% mustU = unique(union(mustUSet, mustUU));
% mustL = unique(union(mustLSet, mustLL));
targetRxn = 'EX_2-pe';
biomassRxn = 'BIOMASS__1';
constrOpt = struct('rxnList', {{'BIOMASS__1'}}, 'values', [0.1*Wild_Type.f]);
for i=1:3
[optForceSets{i}, posOptForceSets{i}, typeRegOptForceSets{i}, flux_optForceSets{i}] = ...
    optForce(Model, targetRxn, biomassRxn, mustU, mustL, minFluxesW, maxFluxesW, minFluxesM, maxFluxesM,'k',i,'nSets',100,'constrOpt', constrOpt,'printExcel',0,'printText',1);
end

%% Showing the final results
for i=1:3
    fprintf('Number of interventions = %d \n',i)
table(optForceSets{i}, posOptForceSets{i}, typeRegOptForceSets{i}, flux_optForceSets{i},'VariableNames',{'optForceSets' ...
    'indices','Type_of_Intervention','Fluxes'})
end
 Duble_int=posOptForceSets{2};
 j=0;
for i=1:size(Duble_int)
    if length(Model.rules{Duble_int(i,1)})~=0 && length(Model.rules{Duble_int(i,2)})~=0
        j=j+1;
        Eff_out(j,:)=Duble_int(i,:);
    end
end
